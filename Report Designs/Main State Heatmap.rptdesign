<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="1">
    <property name="createdBy">Eclipse BIRT Designer Version 4.11.0.v202108101920</property>
    <property name="units">in</property>
    <property name="theme">Tecktracker.Techtracker</property>
    <property name="layoutPreference">auto layout</property>
    <property name="bidiLayoutOrientation">ltr</property>
    <property name="imageDPI">96</property>
    <list-property name="libraries">
        <structure>
            <property name="fileName">/ThemesReportItems31.rptlibrary</property>
            <property name="namespace">ThemesReportItems31</property>
        </structure>
        <structure>
            <property name="fileName">Report Libraries/Tecktracker.rptlibrary</property>
            <property name="namespace">Tecktracker</property>
        </structure>
    </list-property>
    <data-sources>
        <data-mart-data-source name="Techtracker Data Source" id="179">
            <property name="datamartURL">Data Objects/Techtraker</property>
            <property name="accessType">latest</property>
        </data-mart-data-source>
    </data-sources>
    <property name="linkedDataModels">
        <data-mart-linked-data-model name="State Heatmap" id="181">
            <property name="dataSource">Techtracker Data Source</property>
            <property name="dataObject">State Heatmap</property>
        </data-mart-linked-data-model>
    </property>
    <page-setup>
        <simple-master-page name="TechtrackerSimpleMasterPage" id="281" extends="Tecktracker.TechtrackerSimpleMasterPage"/>
    </page-setup>
    <body>
        <label id="279">
            <property name="fontFamily">"Lato"</property>
            <property name="fontSize">36pt</property>
            <property name="fontWeight">bold</property>
            <property name="color">#333333</property>
            <text-property name="text">Most active countries</text-property>
        </label>
        <label id="280">
            <property name="fontFamily">"Lato"</property>
            <property name="fontSize">18pt</property>
            <expression name="bookmark" type="javascript">"loopVizTitle"</expression>
            <text-property name="text">Week of</text-property>
        </label>
        <extended-item extensionName="Map" id="180">
            <xml-property name="xmlRepresentation"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Maps:MapModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Maps="http://www.birt.actuate.com/Maps" xmlns:attribute="http://www.birt.eclipse.org/ChartModelAttribute">
  <Maps:Type>World with Countries</Maps:Type>
  <Maps:AreaDefinition>
    <Maps:ShowShadow>false</Maps:ShowShadow>
    <Maps:Border>
      <Visible>false</Visible>
    </Maps:Border>
    <Maps:Background xsi:type="attribute:ColorDefinition">
      <Transparency>0</Transparency>
      <Red>255</Red>
      <Green>255</Green>
      <Blue>255</Blue>
    </Maps:Background>
  </Maps:AreaDefinition>
  <Maps:MapDefinition>
    <Maps:ShowLabels>false</Maps:ShowLabels>
    <Maps:IncludeValueInLabels>false</Maps:IncludeValueInLabels>
    <Maps:UseSNameInToolTip>false</Maps:UseSNameInToolTip>
    <Maps:Border>
      <Style>Solid</Style>
      <Thickness>1</Thickness>
      <Color>
        <Transparency>255</Transparency>
        <Red>192</Red>
        <Green>192</Green>
        <Blue>192</Blue>
      </Color>
      <Visible>true</Visible>
    </Maps:Border>
    <Maps:Background>
      <Transparency>255</Transparency>
      <Red>255</Red>
      <Green>255</Green>
      <Blue>255</Blue>
    </Maps:Background>
    <Maps:UseHoverColor>true</Maps:UseHoverColor>
    <Maps:HoverColor>
      <Transparency>255</Transparency>
      <Red>192</Red>
      <Green>192</Green>
      <Blue>192</Blue>
    </Maps:HoverColor>
    <Maps:EntityQuery>
      <Definition>row[&quot;abbreviation&quot;]</Definition>
      <Grouping>
        <Enabled>true</Enabled>
        <GroupType>Text</GroupType>
        <AggregateExpression>Sum</AggregateExpression>
      </Grouping>
    </Maps:EntityQuery>
    <Maps:ValueQuery>
      <Definition>row[&quot;total&quot;]</Definition>
      <Grouping>
        <Enabled>true</Enabled>
        <GroupType>Text</GroupType>
        <AggregateExpression>First</AggregateExpression>
      </Grouping>
    </Maps:ValueQuery>
    <Maps:ShowTooltip>true</Maps:ShowTooltip>
    <Maps:Tooltip>
      <Text>row[&quot;name&quot;]</Text>
      <Delay>200</Delay>
    </Maps:Tooltip>
    <Maps:Hyperlink>
      <BaseUrl></BaseUrl>
      <Target></Target>
      <BaseParameterName></BaseParameterName>
      <ValueParameterName></ValueParameterName>
    </Maps:Hyperlink>
    <Maps:InvokeScript>
      <Script></Script>
    </Maps:InvokeScript>
  </Maps:MapDefinition>
  <Maps:LegendDefinition>
    <Maps:Show>false</Maps:Show>
  </Maps:LegendDefinition>
  <Maps:FormatDefinition>
    <Maps:DecimalNumber>2</Maps:DecimalNumber>
  </Maps:FormatDefinition>
  <Maps:BaseFontDefinition>
    <Value></Value>
    <Font>
      <Name>Tahoma</Name>
      <Alignment/>
    </Font>
    <Color>
      <Transparency>255</Transparency>
      <Red>85</Red>
      <Green>85</Green>
      <Blue>85</Blue>
    </Color>
  </Maps:BaseFontDefinition>
  <Maps:ColorRange>
    <Maps:Elements>
      <Maps:MaxValue>500.0</Maps:MaxValue>
      <Maps:DisplayValue></Maps:DisplayValue>
      <Maps:Color>
        <Transparency>255</Transparency>
        <Red>113</Red>
        <Green>142</Green>
        <Blue>164</Blue>
      </Maps:Color>
    </Maps:Elements>
    <Maps:Elements>
      <Maps:MinValue>500.0</Maps:MinValue>
      <Maps:MaxValue>1000.0</Maps:MaxValue>
      <Maps:DisplayValue></Maps:DisplayValue>
      <Maps:Color>
        <Transparency>255</Transparency>
        <Red>18</Red>
        <Green>54</Green>
        <Blue>82</Blue>
      </Maps:Color>
    </Maps:Elements>
    <Maps:Gradient>true</Maps:Gradient>
    <Maps:Color>
      <Transparency>255</Transparency>
      <Red>255</Red>
      <Green>255</Green>
      <Blue>255</Blue>
    </Maps:Color>
  </Maps:ColorRange>
  <Maps:Script>handleColorRange: function(colorrange) {
    var steps = [0, 100, 200, 300, 500, 700, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 7000, 10000];
    
    var min = steps[0];
    for (var i = steps.length; i >= 0; i--) {
        if (this.minValue > steps[i]) {
            min = steps[i];
            break;	
        }
    }
    
    var max = steps[steps.length - 1];
    for (var i = 0; i &lt; steps.length; i++) {
        if (this.maxValue &lt; steps[i]) {
            max = steps[i];
            break;
        }
    }
    
    var mid = min + ((max - min) / 2);
    
    colorrange.minValue = min;
    colorrange.color[0].minValue = min;
    colorrange.color[0].maxValue = mid;
    colorrange.color[1].minValue = mid;
    colorrange.color[1].maxValue = max;
},

handleData: function(data) {
    this.minValue = Number.MAX_VALUE;
    this.maxValue = Number.MIN_VALUE;
    for (var i = 0; i &lt; data.length; i++) {
        if (data[i].value &lt; this.minValue)
            this.minValue = data[i].value;
            
        if (data[i].value > this.maxValue)
            this.maxValue = data[i].value;
    }
},&#xD;
&#xD;
/**&#xD;
 * Called to change map formats.&#xD;
 *&#xD;
 * @param map&#xD;
 *            map options&#xD;
 */&#xD;
handleMap: function(map)&#xD;
{&#xD;
    map.legendBgAlpha = 0;
    map.legend&#xD;
},</Maps:Script>
</Maps:MapModel>
]]></xml-property>
            <property name="inheritColumns">true</property>
            <property name="height">480px</property>
            <property name="width">980px</property>
            <expression name="bookmark" type="javascript">"MovingMap"</expression>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">abbreviation</property>
                    <text-property name="displayName">abbreviation</text-property>
                    <expression name="expression" type="javascript">dataSetRow["abbreviation"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">total</property>
                    <text-property name="displayName">total</text-property>
                    <expression name="expression" type="javascript">dataSetRow["total"]</expression>
                    <property name="dataType">integer</property>
                </structure>
            </list-property>
            <property name="linkedDataModel">State Heatmap</property>
        </extended-item>
        <extended-item extensionName="HTMLControl" id="47">
            <property name="html">&lt;div style="width:900px;">
	&lt;button class="loopVizButton loopVizPlayPause">&amp;#9658;&lt;/button>
	&lt;div style="width:800px; float:right">
		&lt;div id="loopVizProgressBar" class="loopVizProgressBar">&lt;span id="loopVizProgressBarVal" style="width:0%">&lt;/span>&lt;/div>
	&lt;/div>
&lt;/div></property>
            <property name="css">.loopVizProgressBar { 
	height: 30px; 
	position: relative;
	background: #ddd;
	cursor: pointer;
}

.loopVizProgressBar > span {
	display: block;
	height: 100%;
	background-color: #636363;
	position: relative;
	overflow: hidden;
	cursor: pointer;
}

.loopVizProgressBar > span.maxed {}

.loopVizButton {
    height: 30px;
    width: 50px;
	background-color: #636363;
	border: none;
	color: white;
	margin-left:5px;
	text: false;
	font-size:16px !important;	
	cursor: pointer;
}</property>
            <method name="clientOnCreate"><![CDATA[var loopSpeed = 750; //loop speed in milliseconds
var idCol = 0; 
var textCol = 1; 
var valCol = 2;
var dateCol = 3; 
var titleCol = 4; 


// variables
var allData = {};
var dates = [];
var titles = {};
var viewerId = this.getViewer().getId();
var currentDateIndex = 0;
var $this = $("#" + this.getId());
var $progress = $this.find(".loopVizProgressBar > span");
var $title = $("#" + this.getViewer().getId() + "_loopVizTitle");

if (window["loopVizInterval"] === undefined)
	window.loopVizInterval = null;

// setup data
var rows = this.getData().rows;
var curDate;
$.each(rows, function(i, row) {
	if (row[dateCol] != curDate) {
		curDate = row[dateCol];
		dates.push(curDate);
		allData[curDate] = [];
		titles[curDate] = row[titleCol];
	}
	allData[curDate].push({id: row[idCol], tooltext: row[textCol], value: row[valCol]});
});


// set initial title
$title.html(titles[dates[dates.length - 1]]);
	
	
// main implementation.  Called when new map data is going to be replaced into view
function changeVisualData (key) {
	var mapId = $("#" + viewerId + "_MovingMap").find("div span").get(0).id;
	var json = FusionCharts(mapId).getJSONData();

	json.data = allData[key];
	json = computeColorRanges(json);
	
	FusionCharts(mapId).setJSONData(json);
	$title.html(titles[key]);
	
	var pct = (currentDateIndex / (dates.length - 1) * 100);
	setProgressValue(pct);
};

function computeColorRanges(json) {

	var data = json.data;
	var minValue = Number.MAX_VALUE;
	var maxValue = Number.MIN_VALUE;
	for (var i = 0; i < data.length; i++) {
		if (data[i].value < minValue)
			minValue = data[i].value;
			
		if (data[i].value > maxValue)
			maxValue = data[i].value;
	}

	var steps = [0, 100, 200, 300, 500, 700, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 7000, 10000];
	
	var min = steps[0];
	for (var i = steps.length; i >= 0; i--) {
		if (minValue > steps[i]) {
			min = steps[i];
			break;	
		}
	}
	
	var max = steps[steps.length - 1];
	for (var i = 0; i < steps.length; i++) {
		if (maxValue < steps[i]) {
			max = steps[i];
			break;
		}
	}
	
	var mid = min + ((max - min) / 2);
	
	json.colorrange.minvalue = min;
	json.colorrange.color[0].minvalue = min;
	json.colorrange.color[0].maxvalue = mid;
	json.colorrange.color[1].minvalue = mid;
	json.colorrange.color[1].maxvalue = max;
	
	return json;
}



// Framework code
function setProgressValue(pct) {
	if (pct == 100) {
		$progress.addClass("maxed");
	} else {
		$progress.removeClass("maxed");
	}
	$progress.width(pct + "%");
}

$this.find(".loopVizPlayPause").click(function() {
    var $playPause = $(this);
    $playPause.toggleClass("active");
    
    if($playPause.hasClass("active")){
        $playPause.text("\u2161");     
        
        	if (loopVizInterval)
			return;
		
		currentDateIndex++;
		if (currentDateIndex >= dates.length)
			currentDateIndex = 0;
	
		changeVisualData(dates[currentDateIndex]);
	
		loopVizInterval = setInterval(function() {
			currentDateIndex++;			
			if (currentDateIndex >= dates.length)
				currentDateIndex = 0;
				
			changeVisualData(dates[currentDateIndex]);
		}, loopSpeed);
        
    } else {
        $playPause.text("\u25ba");
        
		clearInterval(loopVizInterval);
		loopVizInterval = null;        
    }
});

$this.find(".loopVizProgressBar").click(function(e) {
	var $progressBar = $(this);
	$this.find(".loopVizPlayPause").removeClass("active").text("\u25ba");
        
	clearInterval(loopVizInterval);
	loopVizInterval = null;     
			
	currentDateIndex = Math.round(e.offsetX / $progressBar.width() * dates.length) - 1
	changeVisualData(dates[currentDateIndex]);
});
]]></method>
            <property name="groups">
                <data-group>
                    <property name="groupName">Date Group</property>
                    <expression name="keyExpr" type="javascript">data["week"]</expression>
                    <property name="interval">none</property>
                    <property name="sortDirection">asc</property>
                </data-group>
            </property>
            <property name="height">30px</property>
            <property name="width">980px</property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">abbreviation</property>
                    <text-property name="displayName">abbreviation</text-property>
                    <expression name="expression" type="javascript">dataSetRow["abbreviation"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">name</property>
                    <text-property name="displayName">name</text-property>
                    <expression name="expression" type="javascript">dataSetRow["name"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">total</property>
                    <text-property name="displayName">total</text-property>
                    <expression name="expression" type="javascript">dataSetRow["total"]</expression>
                    <property name="dataType">integer</property>
                </structure>
                <structure>
                    <property name="name">week</property>
                    <text-property name="displayName">week</text-property>
                    <expression name="expression" type="javascript">dataSetRow["week"]</expression>
                    <property name="dataType">date</property>
                </structure>
                <structure>
                    <property name="name">title</property>
                    <expression name="expression" type="javascript">"Week of " + Formatter.format(dataSetRow["week"], "MMMM d");</expression>
                    <property name="dataType">string</property>
                    <property name="allowExport">true</property>
                </structure>
            </list-property>
            <property name="linkedDataModel">State Heatmap</property>
        </extended-item>
    </body>
</report>
